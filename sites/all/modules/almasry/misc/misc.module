<?php

/**
 * Implments hook_init
 */
function misc_init() {	
  ctools_include('modal');
  ctools_modal_add_js();

  drupal_add_js(drupal_get_path('module', 'misc') . '/js/misc.js',
    array('scope' => 'footer', 'group' => 'theme'));
}

/**
 * Implement hook_views_api().
 */
function misc_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Implments hook_menu
 */
function misc_menu() {
  // modal to node media fields, ctools modal js must be added to parent page
  $items['manage/%ctools_js/contribution/%node'] = array(
    'description' => 'Modalframe link, will list node meda files in a popup',
    'page callback' => 'misc_preview_contribution_modal',
    'page arguments' => array(1,3),
    'access callback' => TRUE,			// TODO: create proper callback based on role/permission
  );

  $items['masry/%ctools_js/contribution-status/%node'] = array(
    'description' => 'Ajax callback, FLIPS contribution publish status',
    'page callback' => 'misc_flib_contribution_publish_status',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
  );

  $items['masry/%ctools_js/contribution-promote/%node'] = array(
    'description' => 'Ajax callback, FLIPS node promoted to frontpage',
    'page callback' => 'misc_flib_contribution_promote_status',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
  );
  
  $items['masry/%ctools_js/contribution-workflow-state/%/%node'] = array(
      'description' => 'Ajax callback, Change the node workflow state',
      'page callback' => 'misc_change_workflow_state',
      'page arguments' => array(1, 3, 4),
      'access callback' => TRUE,
  );

  $items['masry/%ctools_js/campain-status/%taxonomy_term'] = array(
    'description' => 'Ajax callback, FLIPS campaign Activate/Suspend Status',
    'page callback' => 'misc_flib_campaign_status',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
  );

  $items['masry/campain-main/%taxonomy_term'] = array(
    'description' => 'Ajax callback, Set campagin to main status, it also remove the main status from any other campaigns',
    'page callback' => 'misc_flib_campaign_main',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );



  $items['youtube/browser/upload'] = array(
    'page callback' => 'youtube_direct_upload_page',
    'access callback' => TRUE,
    'file' => 'includes/youtube/youtube.inc'
  );

  $items['suggest-campaign/%ctools_js'] = array(
    'title' => t('Suggest Campaign'),
    'page callback' => 'suggest_campaign',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Callback for a custom menu item
 * returns ctools modal of node media field if possible, otherwise it just redirect to a page
 * with media field renderd to it
 * 
 * @param $js is ctools modal js enabled ?
 * @param $node to node to render its media field
 */
function misc_preview_contribution_modal($js = FALSE, $node) {
  $delta = arg(4);
  $field_name = 'field_media';

  if (is_numeric($delta)) {
    $node->{$field_name}['und'] = array(
      $node->{$field_name}['und'][$delta]
    );
  }

  $output = field_view_field('node', $node, $field_name, 'full');
  $title = $node->title;

  if ($js) {
    ctools_modal_render($title, $output);
  }
  else {
    drupal_set_title($title);
    print  drupal_render($output);
  }
}

function misc_form_contribution_node_form_alter(&$form, &$form_state) {
  global $user;

  // this is to fix a disqus bug, an additional 
  // empty tab is shown to unauthorized users
  if (!user_access('toggle disqus comments') && !user_access('administer comments')) {
    hide($form['comment_settings']);	
  }
  
  hide($form['field_edit_status']);


  // if we have campaign tid passed as arg 3
  if (is_numeric(arg(3))) {
    $term = taxonomy_term_load(arg(3));
    // if this is a suggested campaign, then this is the second step of suggesting a campaign
    // change drupal title
    if ($term->field_status['und'][0]['value'] == 2) {
      drupal_set_title(t('Step 2: Create Contribution'));  
    }

    $form['field_topic']['und']['#default_value'] = arg(3);
    $form['field_topic']['#default_value'] = arg(3);
    $form['field_topic']['und']['#disabled'] = TRUE;
  }
  // if not root user and not edit form and - as else - no campaign defined
  elseif ($user->uid != 1 && !isset($form['#node_edit_form'])) {
    drupal_set_message(t('Please choose campaign to add contribution to'), 'warning');
    drupal_goto('campaigns/all');
  }
}


/**
 * Callback for ajax request
 * 
 * flib campaign active/suspended status
 * 
 * @param $js
 * @param $term
 */
 function misc_flib_campaign_status($js = FALSE, $term) {
   $msg = '';
   $new_label = '';

   switch ($term->field_status['und'][0]['value']) {
   case 0:
     $term->field_status['und'][0]['value'] = 1;
     $msg = $term->name . t(' is now Activated');
     $new_label = t('Suspend');
     break;

   case 1:
     $term->field_status['und'][0]['value'] = 0;
     $msg = $term->name . t(' is now Suspended');
     $new_label = t('Activate [Suspended]');
     break;

   case 2:
     $term->field_status['und'][0]['value'] = 1;
     $msg = $term->name . t(' is now Activated');
     $new_label = t('Suspend');
     break;
   }

   taxonomy_term_save($term);
     
     if ($js) {
       $commands = array();
   $commands[] = ajax_command_alert($msg);
   $commands[] = ajax_command_html('.campaign-status-' . $term->tid, $new_label);

   print ajax_render($commands);
     }
     else {
       drupal_set_message($msg);
   drupal_goto('manage/campaign');
     }
 }

/**
 * Callback for ajax request
 * 
 * make a campaign a main one
 * @param  $js
 * @param  $term
 */
function misc_flib_campaign_main($term) {
  $msg = '';

  // setting the current item to be the main campaign
  $term->field_is_current_topic['und'][0]['value'] = 1;
  $msg = $term->name . t(' is now The main Comapaign');

  if (!$term->field_status['und'][0]['value']) {
    $term->field_status['und'][0]['value'] = 1;
    $msg .= t('; also it is now activated ');
  }

  taxonomy_term_save($term);
  
  drupal_set_message($msg);
  drupal_goto('manage/campaign');

}


/**
 * Callback for ajax request
 * 
 * @param $js
 * @param $contribution
 */
function misc_flib_contribution_publish_status($js = FALSE, $contribution) {
  $output = '';
  $label = '';

  if ($contribution->status) {
    $contribution->status = 0;
    $label = t('publish');
  }
  else {
    $contribution->status = 1;
    $label = t('unpublish');
  }

  $output = l($label, 'masry/nojs/contribution-status/' . $contribution->nid,
    array('attributes' => array('class' => array('use-ajax', 'contributions-status-' . $contribution->nid))));


  node_save($contribution);

  if ($js) {
    $commands = array();
    $commands[] = ajax_command_html('.publish-' . $contribution->nid, $output);

    print ajax_render($commands);
  }
  else {
    // 		drupal_set_message($msg);
    // 		drupal_goto('manage/campaign');
  }
}


/**
 * Callback for ajax request
 *
 * @param $js
 * @param $contribution
 */
function misc_flib_contribution_promote_status($js = FALSE, $contribution) {
  $output = '';
  $label = '';

  if ($contribution->promote) {
    $contribution->promote = 0;
    $label = t('Promote');
  }
  else {
    $contribution->promote = 1;
    $label = t('Demote');
  }

  $output = l($label, 'masry/nojs/contribution-promote/' . $contribution->nid,
    array('attributes' => array('class' => array('use-ajax', 'contributions-promote-' . $contribution->nid))));


  node_save($contribution);

  if ($js) {
    $commands = array();
    $commands[] = ajax_command_html('.promote-' . $contribution->nid, $output);

    print ajax_render($commands);
  }
  else {

  }
}




/**
 * Implments hook_node_insert
 * we want keep a list of all files that should be uploaded later 
 */
function misc_node_insert($node) {
  if ($node->type == 'contribution') {
    // 1. list all fids
    $fids = array();
    foreach ($node->field_media['und'] as $key => $file) {
      $fids[] = $file['fid'];
    }
  
    if (!count($fids)) {
      return;
    }
  
    // 2. check for audio and videos that are file uplods (not youtube embeds or soundcloud embeds) 
    $to_process_items = db_select('file_managed', 'fm')
      ->fields('fm', array('fid', 'filename', 'filemime'))
      ->condition('fid', $fids, 'IN')
      ->condition('filesize', 0, '>')
      ->condition(db_or()->condition('filemime', 'audio/%', 'LIKE')->condition('filemime', 'video/%', 'LIKE'))
      ->execute()
      ->fetchAllAssoc('fid');
  
    // 3. store the items that will need further processing in our table & notify user
    $videos = array();
    $audios = array();
    $msg = array();
    foreach ($to_process_items as $fid => $item) {
      db_insert('direct_upload_files')
        ->fields(array(
          'fid' => $fid,
          'nid' => $node->nid,
        ))
        ->execute();
  
      // keep list of files to be processed for a notification message
      if (strpos($item->filemime, 'video') !== FALSE) {
        $videos[] = $item->filename;
      }
      else {
        $audios[] = $item->filename;
      }
    }
  
    if (count($videos) > 0) {
      $msg[] = implode(', ', $videos) . ' are pending upload to Youtube';
    }
    if (count($audios) > 0) {
      $msg[] = implode(', ', $audios) . ' are pending upload to Soundcloud';
    }
  
    // set dummy drupal message for testing
    // TODO replace with a nicer message before going live
    drupal_set_message(implode(' & ', $msg));
  }
}


/**
 * set the node edit status field to 'original' if it is new
 * 'edited' otherwise
 * @param unknown_type $node
 */
function misc_node_presave($node) {
  if (isset($node->is_new) && $node->is_new) {
    $node->field_edit_status['und'][0]['value'] = 'original';
  }
  elseif (isset($node->revision) && $node->revision){
    $node->field_edit_status['und'][0]['value'] = 'edited';
  }
}

/**
 * Implments hook_cron
 */
function misc_cron() {
  $query = db_select('direct_upload_files', 'duf');
  $query->join('file_managed', 'fm', 'fm.fid = duf.fid');

  $items = $query->fields('duf', array('fid', 'nid', 'status', 'id', 'mapped_fid'))
    ->fields('fm', array('filename', 'uri', 'filemime'))
    ->condition('duf.status', array(0, 1), 'IN')
    ->execute()
    ->fetchAll();

  foreach ($items as $item) {

    // 1. Video files
    if (strpos($item->filemime, 'video') !== FALSE) {
      // contains youtube upload logic
      ctools_include('youtube', 'misc', 'includes/youtube');
      $upload_function = 'youtube_upload_video';

      // this handler will parse video url and generate system URI
      ctools_include('MediaInternetYouTubeHandler', 'media_youtube', 'includes');
      $handler = new MediaInternetYouTubeHandler('');
    }
    // 2. Audio files
    else {
      // contain sound cloud upload logic
      ctools_include('soundcloud', 'misc', 'includes/youtube');
      $upload_function = 'almasry_soundcloud_upload_audio';

      // this handler will parse track url and generate system URI
      ctools_include('MediaInternetSoundCloudHandler', 'media_soundcloud', 'includes');
      $handler = new MediaInternetSoundCloudHandler('');
    }

    $node = node_load($item->nid);

    // item requires uploading
    if ($item->status == 0) {
      // set item title and real path
      $item->title = $node->title;
      $item->path = drupal_realpath($item->uri);

      // upload the item
      $embed_item = $upload_function($item);

      // if upload is successfull
      if (is_object($embed_item)) {
        // create a new file entry for the newly uploaded vide
        $uri = $handler->parse($embed_item->url);
        $file = file_uri_to_object($uri, TRUE);
        $file->filename = $item->filename;
        $file = file_save($file);

        // map the old file to the new file
        // but still, we won't add it to the node till it is accepted
        db_update('direct_upload_files')
          ->condition('nid', $item->nid)
          ->condition('fid', $item->fid)
          ->fields(array(
            'status' => 1,
            'mapped_fid' => $file->fid,
            'id' => $embed_item->id
          ))
          ->execute();
      }
    }

    // item require status update, it is now in processing state
    elseif ($item->status == 1) {
      $status_function = $upload_function . '_status';
      $status = $status_function($item->id);

      if (is_object($status)) {
        db_update('direct_upload_files')
          ->condition('nid', $item->nid)
          ->condition('fid', $item->fid)
          ->fields(array(
            'status' => $status->status,
            'upload_status' => $status->upload_status,
            'upload_status_reason' => $status->upload_status_reason
          ))
          ->execute();

        // if the file was accepted, update the node and replace the video file
        // with the youtube embed
        if ($status->upload_status  == 1) {
          misc_replace_media_file($node, $item->fid, $item->mapped_fid);
        }
      }
    }

  }
}


function misc_replace_media_file($node, $fid, $mapped_fid) {
  // replace older file with new one
  foreach ($node->field_media['und'] as $delta => $file) {
    if ($file['fid'] == $fid) {
      // load the new file
      $mapped_file = file_load($mapped_fid);

      foreach ($mapped_file as $key => $value) {
        $node->field_media['und'][$delta][$key] = $value;
      }

      node_save($node);
      return;
    }
  }
}

/**
 * Implments hook_form_FORM_ID_alter
 * we want to hide some fields for the contributer when he is suggesting a campaign
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function misc_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {  
  // if this a campaign creation form
  if (is_array($form['#term']) && !is_numeric($form['#term']['tid']) && $form['#term']['vocabulary_machine_name']  == 'campaign') {
    global $user;

    // 4 is the contributer role ID
    if (in_array(4, array_keys($user->roles))) {
      drupal_set_title(t('Step 1: Create Campaign'));

      hide($form['field_status']);
      hide($form['field_is_current_topic']);

      // we add a new form submit handler
      $form['#submit'][] = 'misc_taxonomy_form_term_submit';
    }
  }
}

/**
 * Implments form_submit to redirect contributers after creating a campagin to creating node form
 * we couldnt' use the form alter cause we needed the term ID
 * @param $form
 * @param $form_state
 */
function misc_taxonomy_form_term_submit($form, &$form_state) {
  if (is_numeric($form_state['term']->tid)) {
    $form_state['redirect'] = url('node/add/contribution/' . $form_state['term']->tid, array('absolute' => TRUE));
  }
}

/**
 * Implments hook_taxonomy_term_presave
 * we want to set some default values when contributer is suggesting a term
 * @param unknown_type $term
 */
function misc_taxonomy_term_presave($term) {
  global $user;

  // operations on campaign 
  if ($term->vocabulary_machine_name == 'campaign') {
    // when a contributer is addign a campaign, we want to make some changes
    if (in_array(4, array_keys($user->roles))) {
      $term->field_is_current_topic['und'][0]['value'] = 0;        // NOT the main campaign
      $term->field_status['und'][0]['value'] = 2;                  // status is suggested
    }
    
    // we need only one main campaign
    // so we demoting any other compaigns from being the main one
    if ($term->field_is_current_topic['und'][0]['value'] == 1) {
      $tids = db_select('field_data_field_is_current_topic', 'ict')
        ->fields('ict', array('entity_id'))
        ->condition('field_is_current_topic_value', 1)
        ->condition('entity_id', $term->tid, '<>')
        ->execute();
      
      foreach ($tids as $row) {
        $demoted_term = taxonomy_term_load($row->entity_id);
        $demoted_term->field_is_current_topic['und'][0]['value'] = 0;
      
        taxonomy_term_save($demoted_term);
      }
    }
  }
}

function misc_change_workflow_state($js, $new_state, $node) {
  $output = '';
  $label = '';
  
  workflow_execute_transition($node, $new_state);
  
  if ($js) {
    $commands = array();
    $commands[] = ajax_command_remove('.row-' . $node->nid);
  
    print ajax_render($commands);
  }
  else {
  
  }
}
