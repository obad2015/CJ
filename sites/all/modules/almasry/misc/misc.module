<?php

define('CJ_ADMIN_PATH', 'admin/config/system/cj');

/**
 * Implments hook_init
 */
function misc_init() {	
  ctools_include('modal');
  ctools_modal_add_js();

  drupal_add_js(drupal_get_path('module', 'misc') . '/js/misc.js',
    array('scope' => 'footer', 'group' => 'theme'));
}


/**
 * Implement hook_views_api().
 */
function misc_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Implments hook_menu
 */
function misc_menu() {
  // modal to node media fields, ctools modal js must be added to parent page
  $items['manage/%ctools_js/contribution/%node'] = array(
    'description' => 'Modalframe link, will list node meda files in a popup',
    'page callback' => 'misc_preview_contribution_modal',
    'page arguments' => array(1,3),
    'access callback' => TRUE,			// TODO: create proper callback based on role/permission
  );

//   $items['masry/%ctools_js/contribution-status/%node'] = array(
//     'description' => 'Ajax callback, FLIPS contribution publish status',
//     'page callback' => 'misc_flib_contribution_publish_status',
//     'page arguments' => array(1, 3),
//     'access callback' => TRUE,
//   );

//   $items['masry/%ctools_js/contribution-promote/%node'] = array(
//     'description' => 'Ajax callback, FLIPS node promoted to frontpage',
//     'page callback' => 'misc_flib_contribution_promote_status',
//     'page arguments' => array(1, 3),
//     'access callback' => TRUE,
//   );
  
  $items['masry/%ctools_js/contribution-workflow-state/%/%node/%'] = array(
      'description' => 'Ajax callback, Change the node workflow state',
      'page callback' => 'misc_change_workflow_state',
      'page arguments' => array(1, 3, 4, 5),
      'access callback' => TRUE,
  );

  $items['masry/campain-status/%taxonomy_term/%'] = array(
    'description' => 'Ajax callback, FLIPS campaign Activate/Suspend Status',
    'page callback' => 'misc_flib_campaign_status',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
  );

  $items['masry/campain-main/%taxonomy_term/%'] = array(
    'description' => 'Ajax callback, Set campagin to main status, it also remove the main status from any other campaigns',
    'page callback' => 'misc_flib_campaign_main',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
  );

  $items['youtube/browser/upload'] = array(
    'page callback' => 'youtube_direct_upload_page',
    'access callback' => TRUE,
    'file' => 'includes/youtube/youtube.inc'
  );
  
  $items['admin/config/system/cj'] = array(
      'title' => t('CJ Settings'),
      'description' => t('Configure Citizin Journalizim.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cj_settings_form'),
      'access arguments' => array('administer bakery'),
   );
  
  $items['admin/config/system/cj/soundcloud-callback'] = array(
      'title' => t('CJ Settings'),
      'description' => t('Configure Citizin Journalizim.'),
      'page callback' => 'almasry_authenticate_soundcloud_callback',
      'file' => 'includes/youtube/soundcloud.inc',
      'access callback' => TRUE
  );
  
  $items['misc/related-media/%node'] = array(
      'description' => t('Callback from ajax to retrieve a node related items'),
      'page callback' => 'misc_related_media',
      'page arguments' => array(2),
      'access callback' => TRUE
  );

  return $items;
}


/**
 * Callback for a custom menu item
 * returns ctools modal of node media field if possible, otherwise it just redirect to a page
 * with media field renderd to it
 * 
 * @param $js is ctools modal js enabled ?
 * @param $node to node to render its media field
 */
function misc_preview_contribution_modal($js = FALSE, $node) {
  $delta = arg(4);
  $field_name = 'field_media';

  if (is_numeric($delta)) {
    $node->{$field_name}['und'] = array(
      $node->{$field_name}['und'][$delta]
    );
  }

  $output = field_view_field('node', $node, $field_name, 'full');
  $title = $node->title;

  if ($js) {
    ctools_modal_render($title, $output);
  }
  else {
    drupal_set_title($title);
    print  drupal_render($output);
  }
}

function misc_form_contribution_node_form_alter(&$form, &$form_state) {
  global $user;
  
  // this is to fix a disqus bug, an additional 
  // empty tab is shown to unauthorized users
  if (!user_access('toggle disqus comments') && !user_access('administer comments')) {
    hide($form['comment_settings']);	
  }
  
  // hide revision infomration in node creation form
  if (!is_numeric($form['nid']['#value'])) {
    hide($form['revision_information']);
  }
  
  // anon and contributers can't add tags
  if (!$user->uid || in_array(4, $user->roles)) {
    hide($form['field_tags']);
  }
  
  // those fields are computed automatically on update
  hide($form['field_edit_status']);
  hide($form['field_has_media']);

  // if we have campaign tid passed as arg 3
  // and this is creation mode
  if (is_numeric(arg(3)) && !is_numeric($form['nid']['#value'])) {
    $term = taxonomy_term_load(arg(3));
    // if this is a suggested campaign, then this is the second step of suggesting a campaign
    // change drupal title
    if ($term->field_status['und'][0]['value'] == 2) {
      drupal_set_title(t('Step 2: Create Contribution'));  
    }

    $form['field_topic']['und']['#default_value'] = arg(3);
    $form['field_topic']['#default_value'] = arg(3);
    
    // hide campaign in node creation
    // field will still be rendered, but hidden by css in
    $form['field_topic']['#prefix'] = '<div class="element-invisible" >';
    $form['field_topic']['#suffix'] = '</div>';
  }
  // if not root user and not edit form
  elseif ($user->uid != 1 && strpos($_GET['q'], 'node/add/contribution') !== FALSE) {
    drupal_set_message(t('Please choose campaign to add contribution to'), 'warning');
    drupal_goto('campaigns/all');
  }
}


/**
 * Callback for ajax request
 * 
 * flib campaign active/suspended status
 * 
 * @param $js
 * @param $term
 */
 function misc_flib_campaign_status($term, $token) {
   $msg = NULL;
   $new_label = NULL;

   if (drupal_valid_token($token)) {
     switch ($term->field_status['und'][0]['value']) {
       case 0:
         $term->field_status['und'][0]['value'] = 1;
         $msg = $term->name . t(' is now Activated');
         $new_label = t('Suspend');
         break;
    
       case 1:
         $term->field_status['und'][0]['value'] = 0;
         $msg = $term->name . t(' is now Suspended');
         $new_label = t('Activate [Suspended]');
         break;
    
       case 2:
         $term->field_status['und'][0]['value'] = 1;
         $msg = $term->name . t(' is now Activated');
         $new_label = t('Suspend');
         break;
     }
     taxonomy_term_save($term);
   }
   else {
    $msg = t('You have made unauthorized request'); 
   }

   drupal_set_message($msg);
   drupal_goto('manage/campaign');
 }

/**
 * Callback for ajax request
 * 
 * make a campaign a main one
 * @param  $js
 * @param  $term
 */
function misc_flib_campaign_main($term, $token) {
  $msg = NULL;

  if (drupal_valid_token($token)) {
    // setting the current item to be the main campaign
    $term->field_is_current_topic['und'][0]['value'] = 1;
    $msg = $term->name . t(' is now The main Comapaign');
  
    // if not active, make active
    if ($term->field_status['und'][0]['value'] != 1) {
      $term->field_status['und'][0]['value'] = 1;
      $msg .= t('; also it is now activated ');
    }
    taxonomy_term_save($term);
  }
  else {
    $msg = t('You have made unauthorized request'); 
  }

  drupal_set_message($msg);
  drupal_goto('manage/campaign');

}


/**
 * Callback for ajax request
 * 
 * @param $js
 * @param $contribution
 */
function misc_flib_contribution_publish_status($js = FALSE, $contribution) {
  $output = '';
  $label = '';

  if ($contribution->status) {
    $contribution->status = 0;
    $label = t('publish');
  }
  else {
    $contribution->status = 1;
    $label = t('unpublish');
  }

  $output = l($label, 'masry/nojs/contribution-status/' . $contribution->nid,
    array('attributes' => array('class' => array('use-ajax', 'contributions-status-' . $contribution->nid))));


  node_save($contribution);

  if ($js) {
    $commands = array();
    $commands[] = ajax_command_html('.publish-' . $contribution->nid, $output);

    print ajax_render($commands);
  }
  else {
    // 		drupal_set_message($msg);
    // 		drupal_goto('manage/campaign');
  }
}


/**
 * Callback for ajax request
 *
 * @param $js
 * @param $contribution
 */
function misc_flib_contribution_promote_status($js = FALSE, $contribution) {
  $output = '';
  $label = '';

  if ($contribution->promote) {
    $contribution->promote = 0;
    $label = t('Promote');
  }
  else {
    $contribution->promote = 1;
    $label = t('Demote');
  }

  $output = l($label, 'masry/nojs/contribution-promote/' . $contribution->nid,
    array('attributes' => array('class' => array('use-ajax', 'contributions-promote-' . $contribution->nid))));


  node_save($contribution);

  if ($js) {
    $commands = array();
    $commands[] = ajax_command_html('.promote-' . $contribution->nid, $output);

    print ajax_render($commands);
  }
  else {

  }
}




/**
 * Implments hook_node_insert
 * we want keep a list of all files that should be uploaded later 
 */
function misc_node_insert($node) {
  if ($node->type == 'contribution') {
    // 1. list all fids
    $fids = array();
    foreach ($node->field_media['und'] as $key => $file) {
      $fids[] = $file['fid'];
    }
  
    if (!count($fids)) {
      return;
    }
  
    // 2. check for audio and videos that are file uplods (not youtube embeds or soundcloud embeds) 
    $to_process_items = db_select('file_managed', 'fm')
      ->fields('fm', array('fid', 'filename', 'filemime'))
      ->condition('fid', $fids, 'IN')
      ->condition('filesize', 0, '>')
      ->condition(db_or()->condition('filemime', 'audio/%', 'LIKE')->condition('filemime', 'video/%', 'LIKE'))
      ->execute()
      ->fetchAllAssoc('fid');
  
    // 3. store the items that will need further processing in our table & notify user
    $videos = array();
    $audios = array();
    $msg = array();
    foreach ($to_process_items as $fid => $item) {
      db_insert('direct_upload_files')
        ->fields(array(
          'fid' => $fid,
          'nid' => $node->nid,
        ))
        ->execute();
  
      // keep list of files to be processed for a notification message
      if (strpos($item->filemime, 'video') !== FALSE) {
        $videos[] = $item->filename;
      }
      else {
        $audios[] = $item->filename;
      }
    }
  
    if (count($videos) > 0) {
      $msg[] = implode(', ', $videos) . ' are pending upload to Youtube';
    }
    if (count($audios) > 0) {
      $msg[] = implode(', ', $audios) . ' are pending upload to Soundcloud';
    }
  
    // set dummy drupal message for testing
    // TODO replace with a nicer message before going live
    drupal_set_message(implode(' & ', $msg));
  }
}


/**
 * set the node edit status field to 'original' if it is new
 * 'edited' otherwise
 * @param $node
 */
function misc_node_presave($node) {
  if ($node->type == 'contribution') {
    // set edit status
    if (isset($node->is_new) && $node->is_new) {
      $node->field_edit_status['und'][0]['value'] = 'original';
    }
    elseif (isset($node->revision) && $node->revision){
      $node->field_edit_status['und'][0]['value'] = 'edited';
    }
    
    // set has media
    if (isset($node->field_media['und'][0]['fid']) && is_numeric($node->field_media['und'][0]['fid'])) {
      $node->field_has_media['und'][0]['value'] = 'has_media';
    }
    else {
      $node->field_has_media['und'][0]['value'] = 'has_no_media';
    }
    
    
    // remove default image
    // check if there is media content in this post
    $fid = variable_get('media_default_file_custom', '');
    foreach ($node->field_media['und'] as $delta => $file) {
      if ($file['fid'] == $fid) {
        unset($node->field_media['und'][$delta]);
      }
    }
  }
  
  
}

/**
 * Implments hook_cron
 */
function misc_cron() {
  $query = db_select('direct_upload_files', 'duf');
  $query->join('file_managed', 'fm', 'fm.fid = duf.fid');

  $items = $query->fields('duf', array('fid', 'nid', 'status', 'id', 'mapped_fid'))
    ->fields('fm', array('filename', 'uri', 'filemime'))
    ->condition('duf.status', array(0, 1), 'IN')
    ->execute()
    ->fetchAll();

  foreach ($items as $item) {

    // 1. Video files
    if (strpos($item->filemime, 'video') !== FALSE) {
      // contains youtube upload logic
      ctools_include('youtube', 'misc', 'includes/youtube');
      $upload_function = 'youtube_upload_video';

      // this handler will parse video url and generate system URI
      ctools_include('MediaInternetYouTubeHandler', 'media_youtube', 'includes');
      $handler = new MediaInternetYouTubeHandler('');
    }
    // 2. Audio files
    else {
      // contain sound cloud upload logic
      ctools_include('soundcloud', 'misc', 'includes/youtube');
      $upload_function = 'almasry_soundcloud_upload_audio';

      // this handler will parse track url and generate system URI
      ctools_include('MediaInternetSoundCloudHandler', 'media_soundcloud', 'includes');
      $handler = new MediaInternetSoundCloudHandler('');
    }

    $node = node_load($item->nid);

    // STEP 1: item requires uploading
    if ($item->status == 0) {
      // set item title and real path
      $item->title = $node->title;
      $item->path = drupal_realpath($item->uri);

      // upload the item
      $embed_item = $upload_function($item);

      // if upload is successfull
      if (is_object($embed_item)) {
        // create a new file entry for the newly uploaded vide
        $uri = $handler->parse($embed_item->url);
        $file = file_uri_to_object($uri, TRUE);
        $file->filename = $item->filename;
        $file = file_save($file);

        // map the old file to the new file
        // but still, we won't add it to the node till it is accepted
        db_update('direct_upload_files')
          ->condition('nid', $item->nid)
          ->condition('fid', $item->fid)
          ->fields(array(
            'status' => 1,
            'mapped_fid' => $file->fid,
            'id' => $embed_item->id
          ))
          ->execute();
      }
    }

    // item require status update, it is now in processing state
    elseif ($item->status == 1) {
      $status_function = $upload_function . '_status';
      $status = $status_function($item->id);

      if (is_object($status)) {
        db_update('direct_upload_files')
          ->condition('nid', $item->nid)
          ->condition('fid', $item->fid)
          ->fields(array(
            'status' => $status->status,
            'upload_status' => $status->upload_status,
            'upload_status_reason' => $status->upload_status_reason
          ))
          ->execute();

        // if the file was accepted, update the node and replace the video file
        // with the youtube embed
        if ($status->upload_status  == 1) {
          misc_replace_media_file($node, $item->fid, $item->mapped_fid);
        }
      }
    }

  }
}


/*
 * after uploading videos to youtube, audios to soundcloud
 * we need to update the node object to use the uploaded files from the remote sources
 * 
 * replaced the old local files to with new remote files
 */
function misc_replace_media_file($node, $fid, $mapped_fid) {
  // replace older file with new one
  foreach ($node->field_media['und'] as $delta => $file) {
    if ($file['fid'] == $fid) {
      // load the new file
      $mapped_file = file_load($mapped_fid);

      foreach ($mapped_file as $key => $value) {
        $node->field_media['und'][$delta][$key] = $value;
      }

      node_save($node);
    }
  }
}

/**
 * Implments hook_form_FORM_ID_alter
 * we want to hide some fields for the contributer when he is suggesting a campaign
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function misc_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {  
  // if this a campaign creation form
  if (is_array($form['#term']) && !is_numeric($form['#term']['tid']) && $form['#term']['vocabulary_machine_name']  == 'campaign') {
    global $user;

    // 4 is the contributer role ID
    if (in_array(4, array_keys($user->roles))) {
      drupal_set_title(t('Step 1: Create Campaign'));

      hide($form['field_status']);
      hide($form['field_is_current_topic']);

      // we add a new form submit handler
      $form['#submit'][] = 'misc_taxonomy_form_term_submit';
      $form['#validate'][] = 'misc_taxonomy_form_term_validate';
    }
  }
}

/**
 * validate than the description is limited by 100 words
 * @param $form
 * @param $form_state
 */
function misc_taxonomy_form_term_validate($form, &$form_state) {
  
}

/**
 * Implments form_submit to redirect contributers after creating a campagin to creating node form
 * we couldnt' use the form alter cause we needed the term ID
 * @param $form
 * @param $form_state
 */
function misc_taxonomy_form_term_submit($form, &$form_state) {
  if (is_numeric($form_state['term']->tid)) {
    $form_state['redirect'] = url('node/add/contribution/' . $form_state['term']->tid, array('absolute' => TRUE));
  }
}

/**
 * Implments hook_taxonomy_term_presave
 * we want to set some default values when contributer is suggesting a term
 * @param unknown_type $term
 */
function misc_taxonomy_term_presave($term) {
  global $user;

  // operating on campaign 
  if ($term->vocabulary_machine_name == 'campaign') {
    // when a contributer is addign a campaign, we want to make some changes
    if (in_array(4, array_keys($user->roles))) {
      $term->field_is_current_topic['und'][0]['value'] = 0;        // NOT the main campaign
      $term->field_status['und'][0]['value'] = 2;                  // status is suggested
    }
    
    // we need only one main campaign
    // so we demoting any other compaigns from being the main one
    if ($term->field_is_current_topic['und'][0]['value'] == 1) {
      $tids = db_select('field_data_field_is_current_topic', 'ict')
        ->fields('ict', array('entity_id'))
        ->condition('field_is_current_topic_value', 1)
        ->condition('entity_id', $term->tid, '<>')
        ->execute();
      
      foreach ($tids as $row) {
        $demoted_term = taxonomy_term_load($row->entity_id);
        $demoted_term->field_is_current_topic['und'][0]['value'] = 0;
      
        taxonomy_term_save($demoted_term);
      }
    }
  }
}

function misc_change_workflow_state($js, $new_state, $node, $token) {
  $output = '';
  $msg = NULL;
  $valid = TRUE;
  
  if (drupal_valid_token($token)) {
    workflow_execute_transition($node, $new_state);
    $msg = t('Contribution updated successfully');
  }
  else {
    $valid = FALSE;
    $msg = t('You have done unauthorized request');
  }
  
  if ($js) {
    $commands = array();
    
    if ($valid) {
      $commands[] = ajax_command_remove('.row-' . $node->nid);
    }
    else {
      $commands[] = ajax_command_alert(t('You have done unauthorized request'));
    }
    
    print ajax_render($commands);
  }
  else {
    drupal_set_message($msg);
    drupal_goto('manage/contributions');
  }
}

/*
 * Implments hook_field_prepare_view
 * 
 * setting default field value 
 */
function misc_entity_load($entities, $type) {
  if ($type == 'node' ) {
    foreach ($entities as $entity) {
      //dsm($entity);
      if ($entity->type == 'contribution' && !(arg(0) == 'node' && arg(2) == 'edit') && empty($entity->field_media)) {
        $fid = variable_get('media_default_file_custom', '');
        
        if (is_numeric($fid)) {
          $file = file_load($fid);
          $file->display = TRUE;
          
          $entity->field_media['und'][0] = (array) $file;
          $entity->field_media['und'][0]['description'] = 'not-fancy';
        }
      }
    }
  }
}

function cj_settings_form() {
  
  // Soundcloud  base URL
  global $base_url;
  ctools_include('soundcloud', 'misc', 'includes/youtube');
  include_once libraries_get_path('php-soundcloud') . '/Services/Soundcloud.php' ;
  $client = new Services_Soundcloud(CLIENT_ID, CLIENT_SECRET, $base_url . '/admin/config/system/cj/soundcloud-callback');
  $form['soundcloud_authenticate'] = array(
      '#type' => 'item',
      '#markup' => l('Login to Scoundcloud', $client->getAuthorizeUrl(array('scope' => 'non-expiring')), array('external' => TRUE))
  );
  
  $form['defaults'] = array(
      '#type' => 'fieldset',
      '#title' => t('Defaults'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  
  $form['defaults']['media_default_file'] = array(
      '#title' => t('Default Contribution Image'),
      '#description' => t('Default image to use when an contribution has no media attached to it.'),
      '#type' => 'managed_file',
      '#default_value' => variable_get('media_default_file_custom', ''), // Use different variable name for the variable, so it won't be overridden by system submit handler
      '#upload_location' => 'public://custom/',
  );
  
  // Perform our custom submit before system submit
  $form['#submit'][] = 'custom_cj_settings_form_submit';
  
  $form = system_settings_form($form);
  
  return $form;
}

function custom_cj_settings_form_submit($form, &$form_state) { 
  // Load the file via file.fid.
  $file = file_load($form_state['values']['media_default_file']);
  if ($file) {
    $file->status = FILE_STATUS_PERMANENT;

    file_save($file);
    
    variable_set('media_default_file_custom', $file->fid);

    // Unset formstate value
    unset($form_state['values']['media_default_file']); // make sure it is unset for system submit
  }
}

function suggest_campaign_link() {
  return l(t('Create Campaign'), 'admin/structure/taxonomy/campaign/add');
}

/**
 * Implments hook_node_validate
 * 
 * Validates that contribution has either body or media is provided
 */
function misc_node_validate($node, $form, &$form_state) {
  if ($node->type == 'contribution') {
    // check if there is media content in this post
    $media_exist = FALSE;
    
    $fid = variable_get('media_default_file_custom', '');
    
    foreach ($node->field_media['und'] as $delta => $file) {
      
      
      if (!$media_exist) {
        $media_exist = (isset($file['fid']) && $file['fid'] > 0);
      }
    }
    
    // check if there is text content in this post
    $body_exist = (isset($node->body['und'][0]['value']) && strlen($node->body['und'][0]['value']) > 1); 

    // if we have neither, ERROR
    if (!$body_exist && !$media_exist) {
      form_set_error('body', t('You must provide either a body or a media file'));  
    }
  }
}

function misc_related_media($node) {
  // making sure term object is there 
  $topic = field_get_items('node', $node, 'field_topic');
  print views_embed_view('related_media', 'related_media', $topic[0]['tid']);
   
  exit;
}